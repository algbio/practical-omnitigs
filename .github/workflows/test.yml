on: [push, pull_request]

name: Tests & Lints

jobs:
  rust:
    name: Rust Tests & Lints
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
    steps:
      - name: Check out Repository
        uses: actions/checkout@v2

      - name: Rust cache
        id: rust-cache
        uses: actions/cache@v2
        with:
          path: |
            /usr/share/rust/.cargo/registry
            /usr/share/rust/.cargo/git
            implementation/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Install rustfmt
        run: rustup component add rustfmt

      - name: Install clippy
        run: rustup component add clippy

      - name: Install cargo-tarpaulin
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-tarpaulin
          version: latest
          use-tool-cache: true

      - name: Cargo Check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --manifest-path implementation/Cargo.toml

      - name: Cargo Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path implementation/Cargo.toml

      - name: Cargo Format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all --manifest-path implementation/Cargo.toml -- --check

      - name: Cargo Lint
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all --all-targets --manifest-path implementation/Cargo.toml -- -D warnings

      - name: Coverage Report with tarpaulin
        uses: actions-rs/cargo@v1
        with:
          command: tarpaulin
          args: --manifest-path implementation/Cargo.toml --all --all-features --timeout 600 --out Lcov -- --test-threads 1

      - name: Upload Coverage
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./lcov.info

  snakemake:
    name: Snakemake Tests
    runs-on: ubuntu-latest
    #needs: rust
    steps:
      - name: Check out Repository
        uses: actions/checkout@v2

      - name: Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            implementation/target
            data
          key: ${{ runner.os }}-snakemake-${{ hashFiles('environment.yml') }}

      - name: Set up conda
        uses: s-weigand/setup-conda@v1.0.4

      - name: Init conda with bash
        run: conda init bash

      - name: Source .bashrc after conda init
        run: source ~/.bashrc

      - name: Create conda environment
        run: conda env create -f environment.yaml

      - name: cat .bashrc
        run: cat ~/.bashrc

      - name: pwd tilde
        run: cd ~; pwd

      - name: ls /usr/share/miniconda/envs
        run: ls -la /usr/share/miniconda/envs

      - name: Activate conda environment
        run: conda activate practical-omnitigs

      - name: Run snakemake Tests
        run: snakemake --cores 1 test